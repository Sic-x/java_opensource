<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         id="WebApp_ID" version="3.1">

  <!--web.xml版本必须在2.3以上才能够支持el表达式等工具使用-->
  <!--SpringMVC的配置和Spring的配置要单独读取,不然集成会报错-->
  <!--
      启动Spring
      需要通过启动监听器来启动Spring
      当服务器启动,ContextLoaderListener就会启动,这样Spring就启动了
  -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--
    配置Spring的xml
    使applicationContext.xml可被读取
  -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>

  <!--
    启动了Spring还需要启动SpringMVC
    servlet默认在服务器发送调用servlet的请求的时候才会创建,
    需求servlet随服务器开启就创建 添加load-on-startup提高优先级
  -->
  <!--配置SpringMVC-->
  <!--servlet 和 servlet-mapping缺一不可-->
  <servlet>
    <!--1.配置核心控制器-->
    <servlet-name>dispatcherServlet</servlet-name>
    <!--DispatcherServlet前置控制器,核心分发器,这个必须记住-->
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!--2.配置SpringMVC核心文件-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:applicationContext-mvc.xml</param-value>
    </init-param>
    <!--随服务器开启而创建-->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>dispatcherServlet</servlet-name>
    <!-- 符合RESTful风格的配置,使用该配置需在applicationContext.xml单独配置静态资源放行 -->
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <!--解决懒加载 no-session的问题-->
  <filter>
    <filter-name>openEntityManager</filter-name>
    <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>openEntityManager</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!--解决中文乱码-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>


  <!-- Spring与shiro集成:需要定义一个shiro过滤器(这是一个代理过滤器，它会到spring的配置中找一个名称相同的真实过滤器) -->
  <!-- shiro的过滤器(帮我们拦截请求)-》什么事情都不做
  Delegating:授(权); 把(工作、权力等)委托(给下级); 选派(某人做某事)
  Proxy:代理 -> 需要通过名称（shiroFilter）去找真正的过滤器
-->
  <filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetFilterLifecycle</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
</web-app>
